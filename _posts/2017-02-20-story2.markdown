---
layout: post
title: "Story 2 - Communication in a distributed team."
date: 2017-02-20
---

This is another story starting with an incident. There will not be much technology in it, although the situation described here has truly helped me become a better developer and a team player.

# The incident again

Our team is split evenly between Oslo and Kraków. Additionally, people can work remotely whenever they feel like doing so. All of us work on one product, in small feature teams that are periodically reassigned to different parts of the platform. Those teams are made up of people from both locations, and developers can move between them.

One sunny afternoon in Kraków, an email lands in everyone's inbox, from our Director of Engineering in Oslo:

<blockquote>
<b>Topic: Payment inconsistency task force</b><br/>
This is top priority. Help if asked.<br/>
(...)<br/>
Team, the payment platform is the key to Schibsted revenue in the future. If we slip up in a system like this we can hurt Schibsted's relationship with the user and loose a lot of money.<br/>
Due to the production issues regarding the inconsistencies (...) we are in a uncomfortable situation that we don’t feel we have control or visibility into our platform.<br/>
(...)<br/>
It is <b>top priority</b> to gain that control and visibility as fast as possible.
(...)<br/>
We are establishing a task force (...) to address these issues. (...) If you are asked to help or participate, please do so, other things can wait.<br/>
(...)
</blockquote>

# What the hell?

No one in Kraków knows what is this about, what inconsistencies is he talking about, and why is this email CCed to half of Schibsted's management from all over the world.

So, a task force has been established, calls were made, teleconferences were organised. Poor Markus had to fly all the way to Kraków for just 1 day, to have a task force meeting with us.

# And what was the problem?

It turned out that some unhandled corner cases were leading to creation of unmatched transactions in our financial reporting system. It looked like we were loosing money. Except that it looked like that only for developers in Oslo. Someone in our Norwegian team noticed the symptoms, got scared, consulted with his/her office mates. Eventually, they raised the issue with our Director of Engineering and things got escalated.

In the meantime, the "issue" was just a task in the backlog of one of the teams with a majority of developers in Kraków, not so highly prioritised. The issue we discussed a lot in Kraków and we have known for quite some time. We even agreed to postpone a code fix until later time, as we could easily correct transaction data manually when it occurred.

We were so confidently ignoring it that we forgot about one thing, people in Oslo did not know about it. They were not participating in these over-the-desk discussions, they were not analysing the problem on a whiteboard with us. They were 1500kms away and everyone in Kraków forgot about that.

# Communication skills

This experience made me realise that communication in a distributed team is a skill to master, not something that comes automatically. A skill that needs to be developed and requires conscious practice. I have discovered that being a good communicator in a co-located team does not magically make you equally good in a distributed environment. Although we have discussed how important communication is, we did not really know what makes it successful, how often to communicate and in what ways. Everyone was feeling like a confident communicator with all those modern tools, Slack, email, video conferences. Yet we were still failing.

After this, and many other less spectacular incidents, I have come up with my own set of rules to follow. They are intended for individuals and teams that want to become better at communicating in a distributed environment.

1. **Be super spammy.**
   
   Use Slack or email to communicate everything you do. Communicate even if you feel like you do not need to. Tiny code refactors, configuration tweaks, deployments, instance reboots. There might be someone whose work is going to be affected by what you just did.
   > It is 7 pm, you are the last one in the office. You reboot that annoying Jenkins host which gets swamped by zombie processes from old builds.
   <br/>Ops. You just trashed build history of the acceptance tests suite that someone was trying to debug after hours at home.

   Deploying a tiny irrelevant fix to production? Shout out in Slack. There might be someone else trying to quick-fix a tiny irrelevant fix that failed on production and got rolled back. You are just going to make it fail again.

2. **Be super spammy, online!**

   You just mumbled that you are going to do something and 2 colleagues seating next to you mumbled in affirmation. You feel good about it and proceed. Well, your colleagues seating in a conference room nearby did not hear that, neither did those seating 2000kms away. Use a special Slack channel for small announcements, make it a habit for everyone to use it.

3. **Meet in real.**

   It is easier to befriend your coworkers in real. Friendships among developers in a distributed team create additional communication channels. Organise on-site workshops regularly, fly people over from other locations. Create meeting opportunities away from the office, like voluntary weekend getaways.
   <br/>Meeting coworkers in real also helps to reduce hostility. I have seen online design discussions turning into flame wars pretty quickly. It is harder to be hostile in a face-to-face situation. It makes online communication more civilised once everyone met in real.

4. **Define a lightweight Slack process.**

   Create dedicated Slack channels for different types of announcements, like deployment-related events, RFC publications, platform health issues. Define a common format for posting in these channels that is clear and concise. Define a small set of rules to follow before posting, including a rule to not clutter a channel with unrelated discussions & memes - have a separate, general-purpose channel for that. Having such process defined helps everyone build a habit of using Slack productively and wasting as little time as possible on browsing uncategorised discussions.


5. **Define a lightweight teleconferencing process.**

   While teleconferencing in a distributed team might not always work, it is beneficial for human interpersonal relationships of team members. First you need to find a slot that suits most people across all timezones. Make this slot a recurring, but voluntary event. Make it a rule to send a meeting summary afterwards. Even short online calls can help the work feel more humane.
   <br/>Second, define a few rules to make these meetings effective. Encourage attendants to come prepared, send agenda or slides upfront. Book slots as short as possible, so that people can stay focused and will not start yawning in the middle. With large recurring meetings, like cross-team standups/syncs, define what kinds of stories are worth mentioning. Make speakers say what the primary audience of their announcement is in the beginning.